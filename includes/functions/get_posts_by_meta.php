<?php

/**
 * Retrieves posts based on meta data.
 *
 * @param array $params An associative array containing the parameters for the query:
 *                      - size (int): The size of the excerpt.
 *                      - per_page (int): The number of posts to display per page.
 *                      - meta_key (string): The meta key to filter by.
 *                      - meta_value (string): The meta value to filter by.
 *                      - return_type (string): The type of response to return ('html' or 'json').
 * @return string The response generated by the function.
 */
function wpt_get_posts_by_meta($params = array())
{

    
    if(empty($params) || 
    $params['size']=='' || 
    empty($params['meta_key']) ||
    $params['meta_key']=='' || 
    empty($params['return_type']) || 
    !isset($params['return_type']) || 
    $params['return_type']==''){
        echo "<div class='error'>Please provide all the required parameters: size, meta_key and return_type</div>";
        die();
    } 

    $return_type = empty($params['return_type']) || !isset($params['return_type']) ?  'html' : $params['return_type'];
   
    $size = empty($params['size']) ?  0 : $params['size'];

    $args = array(
        'post_type'      => 'any',
        'posts_per_page' => empty($params['per_page']) ?  -1 : $params['per_page'],
        'paged'          => get_query_var('paged') ? get_query_var('paged') : 1,
        // 'orderby'        => 'date',
        // 'order'          => 'DESC',
        'post_status'    => 'publish',
        'excerpt_length' => empty($params['size']) ?  0 : $params['size'],
    );

    if (!empty($params['meta_key'])) {
        $args['meta_key'] = $params['meta_key'];
    }

    if (!empty($params['meta_value'])) {
        $args['meta_value'] = $params['meta_value'];
    }

    // dd($args);

    $query = new WP_Query($args);

    if (!$query->have_posts()) {
        $response = _wpt_handle_no_posts($params);
    } else {
        $status = 200;
        $message = 'success';

        if ($params['return_type'] === 'html') {
            $response = _wpt_generate_html_response_for_posts($query, $params);
        } elseif ($params['return_type'] === 'json') {
            $response = _wpt_generate_json_response_for_posts($query, $status, $message);
        }elseif ($return_type === 'array') {
            $response = _wpt_generate_array_response_for_posts($query, $status, $message);
        }
    }

    wp_reset_postdata();
    return $response;
}
/**
 * Retrieves posts based on meta data.
 *
 *                      - size (int): The size of the excerpt.
 *                      - meta_key (string): The meta key to filter by.
 *                      - meta_value (string): The meta value to filter by.
 */
add_action('wp_ajax_wpt_get_posts_by_meta_endpoint', 'wpt_get_posts_by_meta_endpoint');
add_action('wp_ajax_nopriv_wpt_get_posts_by_meta_endpoint', 'wpt_get_posts_by_meta_endpoint');
function wpt_get_posts_by_meta_endpoint()
{
    echo  wpt_get_posts_by_meta([
        'per_page'    => -1,
        'return_type' => 'html',
        'size' =>   $_REQUEST['size'],
        'meta_key' =>   @$_REQUEST['meta_key'],
        'meta_value' =>   @$_REQUEST['meta_value'],
    ]);
    die();
}


/**
 * A function that gets posts by meta using a shortcode.
 *
 *                      - size (int): The size of the excerpt.
 *                      - per_page (int): The number of posts to display per page.
 *                      - meta_key (string): The meta key to filter by.
 *                      - meta_value (string): The meta value to filter by.
 */
add_shortcode('wpt_get_posts_by_meta', 'wpt_get_posts_by_meta_shortcode');

function wpt_get_posts_by_meta_shortcode($atts)
{
    return wpt_get_posts_by_meta([
        'per_page'    => !empty($atts['per_page']) ? $atts['per_page'] : -1,
        'return_type' => 'html',
        'size' =>   $atts['size'],
        'meta_key' =>   @$atts['meta_key'],
        'meta_value' =>   @$atts['meta_value'],
    ]);
}
